" vimwiki setup"{{{
"vimwiki conversion auto des fichiers du wiki en html
let vimwiki = {}
let vimwiki.path = '~/vimwiki/'
let vimwiki.path_html = '~/Sites/tyjak.github.io/'
let vimwiki_perso = {}
let vimwiki_perso.path = '~/share/vimwiki_perso'
let vimwiki_perso.path_html = '~/share/sites/perso'
let vimwiki_boulot = {}
let vimwiki_boulot.path = '~/share/vimwiki_boulot'
let g:vimwiki_list = [vimwiki, vimwiki_perso, vimwiki_boulot]
let g:vimwiki_folding='expr'

"Startify setup"{{{
let g:startify_change_to_vcs_root = 1
let g:startify_bookmarks = []
let g:startify_bookmarks += [{'h':'~/vimwiki/index.wiki'}]
let g:startify_bookmarks += [{'d':'~/Documents'}]
let g:startify_bookmarks += ['~/.muttrc-local']
let g:startify_bookmarks += ['~/.config/i3/config']
let g:startify_bookmarks += ['~/.config/i3/status.py']
let g:startify_bookmarks += ['~/.config/vimb/config']
let g:startify_bookmarks += ['~/.config/vimb/bookmark']
let g:startify_bookmarks += ['~/share/vimwiki_perso/index.wiki']

augroup vimrc

    autocmd!
    "Color for ansible
    autocmd BufRead,BufNewFile ~/src/ansible-*/**/*.yml set filetype=ansible

    "Color and foldmethod for special .feature file
    autocmd BufRead,BufNewFile *.rules set filetype=cucumber | set foldmethod=indent

augroup END

"Personal Slideshow
noremap <F8> :call Slideshow()<CR>

"TO TEST
"command! -range Htmlentities <line1>,<line2>!php -r "print htmlentities(file_get_contents('php://stdin','r'),ENT_IGNORE,'ISO-8859-1');"
"command! -range Unquotedtext <line1>,<line2>!php -r "print utf7_decode(quoted_printable_decode(file_get_contents('php://stdin','r')));"

function! UnquotedText()
    '<,'>!php -r "print utf8_decode(quoted_printable_decode(file_get_contents('php://stdin','r')));"
endfunction

function! UrlEncode()
    '<,'>!php -r "print rawurlencode(file_get_contents('php://stdin','r'));"
endfunction

function! UrlDecode()
    '<,'>!php -r "print rawurldecode(file_get_contents('php://stdin','r'));"
endfunction

function! HtmlEntities()
    '<,'>!php -r "print htmlentities(file_get_contents('php://stdin','r'));"
endfunction

function! HtmlDecodeEntities()
    '<,'>!php -r "print html_entity_decode(file_get_contents('php://stdin','r'));"
endfunction

function! VimwikiLinkHandler(link) "{{{ Use Vim to open links with the
" 'vlocal:' or 'vfile:' schemes.  E.g.:
"   1) [[vfile:///~/Code/PythonProject/abc123.py]], and
"   2) [[vlocal:./|Wiki Home]]
let link = a:link
if link =~ "vlocal:" || link =~ "vfile:"
  let link = link[1:]
else
  return 0
endif
let [idx, scheme, path, subdir, lnk, ext, url] =
     \ vimwiki#base#resolve_scheme(link, 0)
if g:vimwiki_debug
  echom 'LinkHandler: idx='.idx.', scheme=[v]'.scheme.', path='.path.
       \ ', subdir='.subdir.', lnk='.lnk.', ext='.ext.', url='.url
endif
if url == ''
  echom 'Vimwiki Error: Unable to resolve link!'
  return 0
else
  call vimwiki#base#edit_file('tabnew', url, [], 0)
  return 1
endif
endfunction " }}}

function! Slideshow()
    execute "!slideshow " . bufname("%")
endfunction


if !empty(glob("~/.vim/work/vimrc"))
    if getcwd() =~ $HOME . '/WORK'
        let $VIMWORKDIR = '~/.vim/work/'
        source ~/.vim/work/vimrc
    endif
    augroup load_vimrc_work
        autocmd!
        autocmd BufEnter ~/WORK/** source ~/.vim/work/vimrc
    augroup end
endif

if !empty(glob("~/.vim/adsnovo/vimrc"))
    so ~/.vim/adsnovo/vimrc
endif
