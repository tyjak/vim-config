" vimwiki setup"{{{
"vimwiki conversion auto des fichiers du wiki en html
let vimwiki = {}
let vimwiki.path = '~/vimwiki/'
let vimwiki.path_html = '~/src/vimwiki_html/app/'
let vimwiki.template_path = '~/src/vimwiki_html/templates/'
let vimwiki_perso = {}
let vimwiki_perso.path = '~/share/vimwiki_perso'
let vimwiki_perso.path_html = '~/share/sites/perso'
let vimwiki_boulot = {}
let vimwiki_boulot.path = '~/share/vimwiki_boulot'
let vimwiki_public = {}
let vimwiki_public.path = '~/sdf/gopher/'
let vimwiki_public.ext = '.gmi'
let vimwiki_public.name = 'sdf'
let g:vimwiki_list = [vimwiki, vimwiki_perso, vimwiki_boulot, vimwiki_public]
let g:vimwiki_folding='expr'
au BufNewFile ~/share/vimwiki_*/diary/*.wiki :silent 0r !~/share/bin/vimwiki-generate-daily-entry.sh '%'
au BufLeave ~/share/vimwiki_*/diary/*.wiki :w %
au BufEnter ~/share/vimwiki_*/diary/*.wiki silent! :lcd %:p:h/..
au BufEnter ~/sdf/gopher/*.gmi silent! :lcd %:p:h/
nmap <leader>t :!tig<CR>

"Startify setup"{{{
let g:startify_change_to_vcs_root = 1
let g:startify_bookmarks = []
let g:startify_bookmarks += [{'h':'~/vimwiki/index.wiki'}]
let g:startify_bookmarks += [{'d':'~/Documents'}]
let g:startify_bookmarks += [{'s':'~/sdf/gopher'}]
let g:startify_bookmarks += ['~/.muttrc-local']
let g:startify_bookmarks += ['~/.config/i3/config']
let g:startify_bookmarks += ['~/.config/i3/status.py']
let g:startify_bookmarks += ['~/.config/vimb/config']
let g:startify_bookmarks += ['~/.config/vimb/bookmark']
let g:startify_bookmarks += ['~/share/vimwiki_perso/index.wiki']

let g:GPGDefaultRecipients=["david@tyjak.net"]

augroup vimrc

    autocmd!
    "Color for ansible
    autocmd BufRead,BufNewFile ~/src/ansible-*/**/*.yml set filetype=ansible

    "Color and foldmethod for special .feature file
    autocmd BufRead,BufNewFile *.rules set filetype=cucumber | set foldmethod=indent

    if exists('+colorcolumn')
      " Highlight up to 255 columns (this is the current Vim max) beyond 'textwidth'
      autocmd BufRead,BufNewFile * let &l:colorcolumn='+' . join(range(1, 254), ',+')
    endif

augroup END

"Personal Slideshow
noremap <F8> :call Slideshow()<CR>

"TO TEST
command! -range Htmlentities <line1>,<line2>!php -r "print htmlentities(file_get_contents('php://stdin','r'),ENT_IGNORE,'ISO-8859-1');"
command! -range Unquotedtext <line1>,<line2>!php -r "print utf8_decode(quoted_printable_decode(file_get_contents('php://stdin','r')));"

function! UnquotedText()
    '<,'>!php -r "print utf8_decode(quoted_printable_decode(file_get_contents('php://stdin','r')));"
endfunction

function! UrlEncode()
    '<,'>!php -r "print rawurlencode(file_get_contents('php://stdin','r'));"
endfunction

function! UrlDecode()
    '<,'>!php -r "print rawurldecode(file_get_contents('php://stdin','r'));"
endfunction

function! HtmlEntities()
    '<,'>!php -r "print htmlentities(file_get_contents('php://stdin','r'));"
endfunction

function! HtmlDecodeEntities()
    '<,'>!php -r "print html_entity_decode(file_get_contents('php://stdin','r'));"
endfunction

function! VimwikiLinkHandler(link)
    " Use Vim to open external files with the 'vfile:' scheme.  E.g.:
    "   1) [[vfile:~/Code/PythonProject/abc123.py]]
    "   2) [[vfile:./|Wiki Home]]
    let link = a:link
    if link =~# '^vfile:'
      let link = link[1:]
    else
      return 0
    endif
    let link_infos = vimwiki#base#resolve_link(link)
    if link_infos.filename == ''
      echomsg 'Vimwiki Error: Unable to resolve link!'
      return 0
    else
      exe 'tabnew ' . fnameescape(link_infos.filename)
      return 1
    endif
endfunction

function! Slideshow()
    execute "!slideshow " . bufname("%")
endfunction


if !empty(glob("~/.vim/work/vimrc"))
    if getcwd() =~ $HOME . '/WORK'
        let $VIMWORKDIR = '~/.vim/work/'
        source ~/.vim/work/vimrc
    endif
    augroup load_vimrc_work
        autocmd!
        autocmd BufEnter ~/WORK/** source ~/.vim/work/vimrc
    augroup end
endif

if !empty(glob("~/.vim/adsnovo/vimrc"))
    so ~/.vim/adsnovo/vimrc
endif
